// object.assign
if (typeof Object.assign != 'function') { Object.defineProperty(Object, "assign", { value: function assign(target, varArgs) { 'use strict'; if (target == null) { throw new TypeError('Cannot convert undefined or null to object'); } var to = Object(target); for (var index = 1; index < arguments.length; index++) { var nextSource = arguments[index]; if (nextSource != null) { for (var nextKey in nextSource) { if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) { to[nextKey] = nextSource[nextKey]; } } } } return to; }, writable: true, configurable: true }); }
// map method of array
if (!Array.prototype.map) {Array.prototype.map = function(callback, thisArg) {var T, A, k; if (this == null) { throw new TypeError(" this is null or not defined"); } var O = Object(this); var len = O.length >>> 0; if (Object.prototype.toString.call(callback) != "[object Function]") { throw new TypeError(callback + " is not a function"); } if (thisArg) { T = thisArg; } A = new Array(len); k = 0; while (k < len) {var kValue, mappedValue; if (k in O) {kValue = O[k]; mappedValue = callback.call(T, kValue, k, O); A[k] = mappedValue; } k++; } return A; }; }
// forEach method of array
if (!Array.prototype.forEach) {Array.prototype.forEach = function(callback, thisArg) {var T, k; if (this == null) {throw new TypeError(' this is null or not defined'); } var O = Object(this); var len = O.length >>> 0; if (typeof callback !== "function") {throw new TypeError(callback + ' is not a function'); } if (arguments.length > 1) {T = thisArg; } k = 0; while (k < len) {var kValue; if (k in O) {kValue = O[k]; callback.call(T, kValue, k, O); } k++; } }; }